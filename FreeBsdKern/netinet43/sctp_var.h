/* * Copyright (c) 2001 Cisco Systems Inc. * Copyright (c) 1982, 1986, 1989, 1993 *	The Regents of the University of California.  All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * 1. Redistributions of source code must retain the above copyright *    notice, this list of conditions and the following disclaimer. * 2. Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in the *    documentation and/or other materials provided with the distribution. * 3. All advertising materials mentioning features or use of this software *    must display the following acknowledgement: *	This product includes software developed by the University of *	California, Berkeley and its contributors. * 4. Neither the name of the University nor the names of its contributors *    may be used to endorse or promote products derived from this software *    without specific prior written permission. * * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF * SUCH DAMAGE. * * $Header: /home/sourceTree/src/sctp/FreeBsdKern/netinet43/sctp_var.h,v 1.4 2001/04/30 17:57:10 randall Exp $ */#ifndef _NETINET_SCTP_VAR_H_#define _NETINET_SCTP_VAR_H_/* SCTP Kernel structures */struct	sctpstat {				/* input statistics: */	u_long	sctp_ipackets;		/* total input packets */	u_long	sctp_hdrops;		/* packet shorter than header */	u_long	sctp_ohdrops;		/* output packet shorter than header */	u_long	sctp_noport;		/* no socket on port */        u_long	sctp_bcastmcast;	/* Number of Mcast/bcast dropped */        u_long  sctp_badpktfmt;	u_long	sctp_fullsock;		/* not delivered, input socket full */	u_long	sctp_pcbcachemiss;	/* input packets missing pcb cache */	u_long	sctp_pcbhashmiss;	/* input packets not for hashed pcb */        u_long  sctp_sendbadaddr;	/* count of sends with invalid addresses */        u_long  sctp_sendbadport;	/* count of sends with invalid ports */				/* output statistics: */	u_long	sctp_opackets;		/* total output packets */	u_long	sctp_fastout;		/* output packets on fast path */};/* * Names for UDP sysctl objects */#define SCTPCTL_STATS		1	/* statistics (read-only) */#define	SCTPCTL_MAXDGRAM	2	/* max datagram size */#define	SCTPCTL_RECVSPACE	3	/* default receive buffer space */#define	SCTPCTL_PCBLIST		4	/* list of PCBs for SCTP sockets */#define SCTPCTL_MAXID		5#define SCTPCTL_NAMES { \	{ 0, 0 }, \	{ "stats", CTLTYPE_STRUCT }, \	{ "maxdgram", CTLTYPE_INT }, \	{ "recvspace", CTLTYPE_INT }, \	{ "pcblist", CTLTYPE_STRUCT }, \}#ifdef _KERNELSYSCTL_DECL(_net_inet_sctp);extern struct	pr_usrreqs sctp_usrreqs;extern struct	inpcbhead sctpdb;extern struct	inpcbinfo sctpinfo;extern u_long	sctp_sendspace;extern u_long	sctp_recvspace;extern struct	sctpstat sctpstat;void	sctp_ctlinput __P((int, struct sockaddr *, void *));void	sctp_init __P((void));void	sctp_input __P((struct mbuf *, int, int));int SCTPisThereAnAbortHere __P((struct mbuf *m,int off));int	sctp_shutdown __P((struct socket *so));unsigned int sctp_calc_alder32 __P((unsigned char *ptr,				    unsigned short  count));voidsctp_notify_mbuf __P((register struct inpcb *inp,		      register struct ip *m,		      struct sockaddr *sa));voidsctp_notify __P((register struct inpcb *inp,int errno));#endif#endif