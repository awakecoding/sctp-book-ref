#ifndef __SLA1_h__#define __SLA1_h__/* SCTP reference Implementation Copyright (C) 2001 Cisco And MotorolaThis file is part of the SCTP reference ImplementationVersion:4.0.5$Header: /home/sourceTree/src/sctp/user/sla1.h,v 1.11 2001/07/24 11:52:39 randall Exp $The SCTP reference implementation  is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published bythe Free Software Foundation; either version 2, or (at your option)any later version.the SCTP reference implementation  is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of                ************************MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU Library General Public License for more details.You should have received a copy of the GNU Library General Public Licensealong with GNU CC; see the file COPYING.  If not, write tothe Free Software Foundation, 59 Temple Place - Suite 330,Boston, MA 02111-1307, USA.  Please send any bug reports or fixes you make to one of the following emailaddresses:rrs@cisco.comkmorneau@cisco.comqxie1@email.mot.comAny bugs reported given to us we will try to fix... any fixes shared willbe incorperated into the next SCTP release.There are still LOTS of bugs in this code... I always run on the motto"it is a wonder any code ever works :)"*/#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <sys/types.h>#include <netinet/in_systm.h>#include <netinet/in.h>#include <netinet/ip.h>#include <arpa/inet.h>#include <sys/ioctl.h>#include <sys/stat.h>#include <stdarg.h>#include <signal.h>#include <fcntl.h>#ifdef __Lynx__#include <socket.h>#include <sockio.h>#else#include <sys/socket.h>#if ! ( defined(LINUX) || defined(TRU64) || defined(AIX))#include <sys/sockio.h>#endif#endif#include <time.h>#include <string.h>#if (defined (LINUX) || defined(TRU64))#include <stropts.h>#endif#include <net/if.h>#include <errno.h>#ifdef	__cplusplusextern "C" {#endifstruct SLA_1_Context{  unsigned int A;  unsigned int B;  unsigned int C;  unsigned int D;  unsigned int E;  unsigned int H0;  unsigned int H1;  unsigned int H2;  unsigned int H3;  unsigned int H4;  unsigned int words[80];	  unsigned int TEMP;  /* block I am collecting to process */  char SLAblock[64];  /* collected so far */  int howManyInBlock;  unsigned int runningTotal;};#define F1(B,C,D) (((B & C) | ((~B) & D)))       /* 0  <= t <= 19 */#define F2(B,C,D) (B ^ C ^ D)                   /* 20 <= t <= 39 */#define F3(B,C,D) ((B & C) | (B & D) | (C & D)) /* 40 <= t <= 59 */#define F4(B,C,D) (B ^ C ^ D)                   /*600 <= t <= 79 *//* circular shift */      #define CSHIFT(A,B) ((B << A) | (B >> (32-A)))#define K1 0x5a827999       /* 0  <= t <= 19 */#define K2 0x6ed9eba1       /* 20 <= t <= 39 */#define K3 0x8f1bbcdc       /* 40 <= t <= 59 */#define K4 0xca62c1d6       /* 60 <= t <= 79 */#define H0INIT 0x67452301#define H1INIT 0xefcdab89#define H2INIT 0x98badcfe#define H3INIT 0x10325476#define H4INIT 0xc3d2e1f0  void SLA1_Init(struct SLA_1_Context *ctx);  void SLA1_Process(struct SLA_1_Context *ctx,unsigned char *ptr, int siz);  void SLA1_Final(struct SLA_1_Context *ctx,unsigned char *digestBuf);#ifdef	__cplusplus}#endif#endif