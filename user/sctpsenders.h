/* SCTP reference Implementation Copyright (C) 2001 Cisco And MotorolaThis file is part of the SCTP reference ImplementationVersion:4.0.5$Header: /home/sourceTree/src/sctp/user/sctpsenders.h,v 1.23 2001/07/24 11:52:39 randall Exp $The SCTP reference implementation  is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published bythe Free Software Foundation; either version 2, or (at your option)any later version.the SCTP reference implementation  is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of                ************************MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU Library General Public License for more details.You should have received a copy of the GNU Library General Public Licensealong with GNU CC; see the file COPYING.  If not, write tothe Free Software Foundation, 59 Temple Place - Suite 330,Boston, MA 02111-1307, USA.  Please send any bug reports or fixes you make to one of the following emailaddresses:rrs@cisco.comkmorneau@cisco.comqxie1@email.mot.comAny bugs reported given to us we will try to fix... any fixes shared willbe incorperated into the next SCTP release.There are still LOTS of bugs in this code... I always run on the motto"it is a wonder any code ever works :)"*/#ifndef __mdtsenders_h__#define __mdtsenders_h__#ifdef	__cplusplusextern "C" {#endifint sendStreamError(struct SCTP *m,		    struct SCTP_association *asoc,		    int strmNum,		    int netNum);int SCTPsendShutdownAck(struct SCTP *m,			struct SCTP_association *asoc,			struct sockaddr *from,			u_char type,			u_long tag,struct sockaddr *toAddr);intSCTPSendHBReq(struct SCTP *m,	       struct SCTP_association *asoc,int);intSCTPSendHBResp(struct SCTP *m,		struct SCTP_association *asoc,	        struct sctpHBunified *,		struct sockaddr *,int netOn);intSCTPsendAShutdown(struct SCTP *m,struct SCTP_association *asoc,int retran);intSCTPsendOpErr(struct SCTP *m,struct sockaddr *to,char *operr,int sz,u_long tag);intSCTPsendAAbort(struct SCTP *m,	       struct SCTP_association *asoc,	       struct sockaddr *to, u_long tag,int errCode,	       int useTagAnyway);intSCTPsendInitiate(struct SCTP *m,struct SCTP_association *asoc);intSCTPsendInitiateAck(struct SCTP *m,struct sockaddr *from,		    struct cookieMessage *cookie,int cookieLength,		    u_long tag,		    char *oper,		    int opersz,		    struct sockaddr *toAddr);intSCTPsendAnyWeCan(struct SCTP *m,		 struct SCTP_association *asoc,int pegit);intSCTPsendRetransmits(struct SCTP *m,		    struct SCTP_association *asoc);int SCTPsendSackFlag(struct SCTP *m,struct SCTP_association *);void SCTPsendCookieAck(struct SCTP *m,		       struct SCTP_association *asoc,		       struct sockaddr *from);voidsendRelReqAck(struct SCTP *m,	      struct SCTP_association *asoc,	      struct sockaddr *from);void SCTPsendStaleCookie(struct SCTP *m,			 u_long tag,			 struct sockaddr *from,			 int staleby);int SCTPsendRelReqOut(struct SCTP *m,		      struct SCTP_association *asoc,		      int retransmitFlag);int sendForwardTSN(struct SCTP *m,		   struct SCTP_association *asoc,		   struct sockaddr *from);#ifdef	__cplusplus}#endif#endif